#include <stdio.h>
#include <stdlib.h>

#define MAX 100

int vertices;
int edges;
int adjMatrix[MAX][MAX]; // adjacency matrix representation of graph
int front = -1, rear = -1;
int Queue[MAX];
int src;
int visited[MAX];

void bfs(int adjMatrix[MAX][MAX], int src, int vertices)
{
    visited[src] = 1;
    Queue[rear++] = src;

    printf("BFS Traversal\n");
    while (rear != front)
    {
        int curr_node = Queue[front++];
        printf("%d ", curr_node);
        for (int i = 0; i <= vertices; i++)
        {
            if (adjMatrix[curr_node][i] == 1 && visited[i] == 0)
            {
                visited[i] = 1;
                Queue[rear++] = i;
            }
        }
    }
}
void dfs(int adjMatrix[MAX][MAX], int src, int vertices)
{
    visited[src] = 1;
    printf("%d", src);

    for (int i = 0; i <= vertices; i++)
    {
        if (adjMatrix[src][i] == 1 && visited[i] == 0)
        {
            dfs(adjMatrix[MAX][MAX], i, vertices);
        }
    }
}

int main()
{

    int i, j, v1, v2;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    // initializing adjacency matrix with 0
    for (i = 0; i < vertices; i++)
    {
        for (j = 0; j < vertices; j++)
        {
            adjMatrix[i][j] = 0;
        }
    }

    // adding edges to the adjacency matrix
    for (i = 0; i < edges; i++)
    {
        printf("Enter the vertices for edge %d: ", i + 1);
        scanf("%d %d", &v1, &v2);
        adjMatrix[v1][v2] = 1;
        adjMatrix[v2][v1] = 1;
    }

    // displaying the adjacency matrix
    printf("\nAdjacency Matrix:\n");
    for (i = 0; i < vertices; i++)
    {
        for (j = 0; j < vertices; j++)
        {
            printf("%d ", adjMatrix[i][j]);
        }
        printf("\n");
    }
    printf("enter the source vertex of your graph\n");
    scanf("%d", &src);
    bfs(adjMatrix, src, vertices);
    printf("DFS traversal is :\n");
    dfs(adjMatrix, src, vertices);

    return 0;
}
